name: Release

on:
  push:
    tags:
      - 'v*'

jobs:
  build:
    runs-on: ${{ matrix.os }}
    env:
      VCPKG_BINARY_SOURCES: "clear;x-gha,readwrite"
      build_type: Release

    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-2022]
        architecture: [x86_64, arm64]
        # Adds a platform value to the matrix, used later on to run the appropriate
        # package command.
        include:
          - os: ubuntu-latest
            platform: linux
          - os: macos-latest
            platform: mac
          - os: windows-2022
            platform: win
        exclude:
          - os: ubuntu-latest
            architecture: arm64
          - os: windows-2022
            architecture: arm64

    steps:
      - name: Export GitHub Actions cache environment variables
        uses: actions/github-script@v7
        with:
          script: |
            core.exportVariable('ACTIONS_CACHE_URL', process.env.ACTIONS_CACHE_URL || '');
            core.exportVariable('ACTIONS_RUNTIME_TOKEN', process.env.ACTIONS_RUNTIME_TOKEN || '');

      - name: Checkout code
        uses: actions/checkout@v4

      - name: Checkout submodules
        shell: bash
        run: |
          git submodule update --init --recursive

      - name: Compute version
        id: compute_version
        shell: bash
        run: |
          version=$(echo ${{ github.ref }} | sed -E 's/refs\/tags\/(v)?//g')
          echo "version=$version" >> $GITHUB_OUTPUT

      - name: Setup cmake
        uses: jwlawson/actions-setup-cmake@v2
        with:
          cmake-version: '3.30.x'

      - name: Use cmake
        run: cmake --version

      - name: Setup MacOS environment
        if: matrix.os == 'macos-latest'
        run: |
          brew update
          brew install utf8proc

      - name: Configure CMake (Windows and Linux)
        if: matrix.os != 'macos-latest'
        shell: bash
        run: |
          cmake . -DPLUGIN_VERSION=${{ steps.compute_version.outputs.version }}

      - name: Configure CMake (MacOS)
        if: matrix.os == 'macos-latest'
        shell: bash
        run: |
          cmake . -DPLUGIN_VERSION=${{ steps.compute_version.outputs.version }} -DCMAKE_APPLE_SILICON_PROCESSOR=${{ matrix.architecture }}

      - name: Build
        shell: bash
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          cmake --build . --config ${{ env.build_type }}

      - name: Create release and upload artifacts
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref_name }}
          name: NeoCCAMS ${{ steps.compute_version.outputs.version }}
          prerelease: false
          draft: true
          files: |
            lib/NeoCCAMS*
            bin/${{ env.build_type }}/NeoCCAMS.dll
